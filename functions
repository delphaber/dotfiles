#!/usr/bin/env bash

# Create a new directory and enter it
function mkd() {
  mkdir -p "$@" && cd "$_";
}

# Change working directory to the top-most Finder window location
function cdf() { # short for `cdfinder`
  cd "$(osascript -e 'tell app "Finder" to POSIX path of (insertion location as alias)')";
}

## Extract files: depends on zip, unrar and p7zip
function ex {
    if [ -f $1 ] ; then
      case $1 in
        *.tar.bz2)   tar xjf $1     ;;
        *.tar.gz)    tar xzf $1     ;;
        *.bz2)       bunzip2 $1     ;;
        *.rar)       unrar e $1     ;;
        *.gz)        gunzip $1      ;;
        *.tar)       tar xf $1      ;;
        *.tbz2)      tar xjf $1     ;;
        *.tgz)       tar xzf $1     ;;
        *.zip)       unzip $1       ;;
        *.Z)         uncompress $1  ;;
        *.7z)        7z x $1        ;;
        *)     echo "'$1' cannot be extracted via ex()" ;;
         esac
     else
         echo "'$1' is not a valid file"
     fi
}

function ltree()
{
    tree -C $* | less -R
}

function echo_last_migration {
  migrate_path='db/migrate/'
  nth_migration=$((${1:-0}+1))
  echo "${migrate_path}$(ls -1t $migrate_path | head -$nth_migration | tail -1)"
}

function last_migration {
  code $(echo_last_migration $*)
}

function view_coverage {
  report='coverage/index.html'
  if [ -f "$report" ]; then
    open "$report"
  fi
}

function view_critics {
  report='tmp/rubycritic/overview.html'
  if [ -f "$report" ]; then
    open "$report"
  fi
}


function docker_rm_all {
  docker rm --force $(docker ps --quiet --all)
}

function rubies {
  for file in $(find . -type f -maxdepth 3 -name '.ruby-version'); do
    echo $(cat $file) -- $file;
  done | sort -n
}

function nodes {
  for file in $(find . -type f -maxdepth 3 -name '.nvmrc'); do
    echo $(cat $file) -- $file;
  done | sort -n
}

function ports {
  lsof -i -Pn | grep -i "listen"
}

function hosts_in_lan {
  arp -a -n | grep -v "incomplete"
}

function postgres_delete_pid {
  rm /usr/local/var/postgresql@15/postmaster.pid
}

function code_socks5_proxy {
  # Use firefox with SOCKS5
  # To stop the proxy, `pkill ssh` or ctrl-c
  ssh -C -N -D 0.0.0.0:3128 code
}

function myip {
  dig +short myip.opendns.com @resolver1.opendns.com
}

function find_and_destroy_logs {
  find . -maxdepth 4 -type f -path '*/log/*' -name '*.log' -print0 | xargs -0 rm
}

function ansible_log {
  nvim /usr/local/var/log/ansible.log
}

function recent {
  LIMIT="${1:-15}"
  ls -lArt | tail -n "$LIMIT"
}

function http_server {
  python3 -m http.server --bind 127.0.0.1
}

function remove_all_gems {
  for i in `gem list --no-versions`; do
    gem uninstall -aIx $i;
  done
}

function find_vagrant_folders {
  find . -type d -name '.vagrant' -maxdepth 3
}

function clear_dns_cache {
  sudo killall -HUP mDNSResponder; sudo killall mDNSResponderHelper; sudo dscacheutil -flushcache
}

function redis-clean {
  redis-cli flushall
}

function docker-start {
  if ! $(docker info > /dev/null 2>&1); then
    echo "Opening Docker for Mac..."
    open -a /Applications/Docker.app
    while ! docker system info > /dev/null 2>&1; do sleep 1; done
    echo "Docker is ready to rock!"
  else
    echo "Docker is up and running."
  fi
}

function extract_sdi_invoice {
  openssl smime -verify -noverify -in $1 -inform DER -out $(basename $1 '.p7m')
}

function deep_node_modules_clean {
  find . -name 'node_modules' -type d -prune -print -exec rm -rf '{}' \;
}

function spring_kill {
  pkill -9 'spring app'
  pkill -9 'spring server'
}

function bundle_safe_update {
  bundle update --conservative --group test development
}
