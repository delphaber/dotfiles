[user]
  name = Fabrizio Monti
  email = f.monti@datocms.com

[alias]
  # shortcuts
  addp = add -p .
  cop = checkout -p .
  br = branch
  bra = branch -av
  co = checkout
  ci = commit
  di = diff
  ds = diff --staged
  re = reset
  st = status

  # info
  log-file = log --follow --patch --
  fame = shortlog --summary --numbered --all --

  # assume-unchanged
  assume = update-index --assume-unchanged
  unassume = update-index --no-assume-unchanged
  assumed = "!git ls-files -v | grep ^h | cut -c 3-"
  unassumeall = "!git assumed | xargs git update-index --no-assume-unchanged"
  assumeall = "!git st -s | awk {'print $2'} | xargs git assume"

  restore-file = !git checkout $(git rev-list -n 1 HEAD -- "$1")^ -- "$1"

  # log
  l  = log --oneline --decorate --graph --branches --remotes -40
  ll = log --oneline --decorate --graph --stat
  ls = log --oneline --decorate --graph --branches --remotes --simplify-by-decoration -40
  t  = log --oneline --decorate --graph --branches --remotes -40 --pretty=format:'%C(yellow)%h%C(red bold)%d %Creset%s %C(green)(%ar) %C(cyan)<%cn>' --date=relative

  # list aliases
  al = !git config --get-regexp 'alias.*' | colrm 1 6 | sed 's/[ ]/ = /'

  # tag
  lasttag = describe --tags --abbrev=0

  # safety alias
  pushf = push --force-with-lease

  # Find branches containing commit
  fb = "!f() { git branch -a --contains $1; }; f"

  # Find tags containing commit
  ft = "!f() { git describe --always --contains $1; }; f"

  # Find commits by source code
  fc = "!f() { git log --pretty=format:'%C(yellow)%h  %Cblue%ad  %Creset%s%Cgreen  [%cn] %Cred%d' --decorate --date=short -S$1; }; f"

  # Find commits by commit message
  fm = "!f() { git log --pretty=format:'%C(yellow)%h  %Cblue%ad  %Creset%s%Cgreen  [%cn] %Cred%d' --decorate --date=short --grep=$1; }; f"

  # Output default branch name (ex. master)
  default-branch="!git symbolic-ref refs/remotes/origin/HEAD | sed 's@^refs/remotes/origin/@@'"

  # Remove all local merged branches, excluding current branch (^*) and other names, e.g. master or dev
  remove-local-branches="!git branch --no-color --merged master | egrep -v '^\\*|master|dev' | xargs git branch -d"

  showtool = "!showci () { rev=${1:-HEAD}; git difftool $rev~1 $rev; }; showci $1"

[color]
  ui = true

[color "branch"]
  current = yellow reverse
  local = yellow
  remote = green

[color "status"]
  added = green
  changed = yellow
  untracked = red

[core]
  attributesfile = /Users/faber/.gitattributes
  editor = nvim
  excludesfile = /Users/faber/.gitignore_global
  pager = delta

[diff]
  colorMoved = default

[pull]
  rebase = true

[push]
  default = current

[rebase]
  autostash = true

[credential]
  helper = osxkeychain

[merge]
  conflictstyle = diff3

[interactive]
  diffFilter = delta --color-only

[delta]
  navigate = true # use n and N to move between diff sections
  line-numbers = true

[bulkworkspaces]
  dato = /Users/faber/Repos/dato/main
